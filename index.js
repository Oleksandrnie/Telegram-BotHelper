const TelegramBot = require('node-telegram-bot-api')
const path = require('path')
const { botToken, kotId, kittyId } = require('./token')
const { instagramText } = require('./functions/instagramTextEdit')
const { sendMessageToCatChat } = require('./functions/catsChat')
const { sendMessageToSupportChat } = require('./functions/supportChat')
const { scheduleCompliments } = require('./functions/compliments')
const {
	switchFunctionsBot,
} = require('./functions/help_function/switchFunctionsBot')
const { toLowerTextAndSave } = require('./functions/textEdit')
const { saveOrUpdateUser } = require('./functions/getUsersData')
const { logAction } = require('./functions/generateLogs')

const initializeBot = () => {
	const bot = new TelegramBot(botToken, { polling: true })

	bot.on('polling_error', error => {
		console.error('[polling_error]', error.code, error.message)
		if (error.code === 'EFATAL') {
			console.error('Fatal error, restarting bot...')
			setTimeout(() => initializeBot(), 10000) // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
		}
	})

	const mainMenu = {
		reply_markup: {
			keyboard: [['–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', '–†–µ–¥–∞–∫—Ü–∏—è', '–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç ?']],
			resize_keyboard: true,
		},
	}

	const cancelKey = {
		reply_markup: {
			keyboard: [['–û–π, –ø–µ—Ä–µ–¥—É–º–∞–ª–∞üíÖüèº']],
			resize_keyboard: true,
		},
	}

	bot.onText('/start', msg => {
		const chatId = msg.chat.id
		const userName = msg.from.first_name || msg.from.username

		bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç ${userName} üôåüèº`, mainMenu).then(r => r)
		bot.sendMessage(
			chatId,
			'–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ /help üòä'
		)

		logAction(msg.from, '/start')
		saveOrUpdateUser(msg.from)
	})

	const userState = {}

	function resetUserState(chatId) {
		userState[chatId] = {
			awaitingText: false,
			currentFunction: null,
			currentSection: null,
		}
	}

	bot.on('message', msg => {
		const chatId = msg.chat.id
		const messageText = msg.text
		const userName = msg.from.first_name || msg.from.username

		const functionsMenu = {
			reply_markup: {
				keyboard: [
					['–¢–µ–∫—Å—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä', '–î–ª—è –∏–Ω—Å—Ç—ã'],
					[chatId === kotId ? '–ß–∞—Ç —Å –∫–∏—Å–æ–π‚ù§Ô∏è‚Äçüî•' : ''],
					['–û–π, –ø–µ—Ä–µ–¥—É–º–∞–ª–∞üíÖüèº'],
				].filter(row => row.some(button => button !== '')),
				resize_keyboard: true,
			},
		}

		const baseOnKnowledgeMenu = {
			reply_markup: {
				keyboard: [['–ê—Ä–∫–∞–Ω—ã', '–ö–∞–Ω–∞–ª—ã'], ['–û–π, –ø–µ—Ä–µ–¥—É–º–∞–ª–∞üíÖüèº']],
				resize_keyboard: true,
			},
		}

		if (!userState[chatId]) {
			resetUserState(chatId)
		}

		if (userState[chatId].awaitingText) {
			if (messageText === '–û–π, –ø–µ—Ä–µ–¥—É–º–∞–ª–∞üíÖüèº') {
				resetUserState(chatId)
				bot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', mainMenu)
				logAction(msg.from, '–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')
				return
			}

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —é–∑–µ—Ä–∞
			if (userState[chatId].currentFunction === 'lowerCase') {
				const filePath = path.join(
					__dirname,
					'temporary_files',
					'–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç.txt'
				)

				toLowerTextAndSave(messageText, filePath)

				bot.sendDocument(chatId, filePath, {
					contentType: 'text/plain',
					caption: '–í–∞—à —Ç–µ–∫—Å—Ç –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –≤ —Ñ–∞–π–ª–µ üôåüèº',
				})
			} else if (userState[chatId].currentFunction === 'instagramText') {
				const filePath = path.join(
					__dirname,
					'temporary_files',
					'instaText.txt'
				)
				const formattedText = instagramText(messageText, filePath)
				bot.sendMessage(chatId, formattedText, { parse_mode: 'HTML' })
			} else if (userState[chatId].currentFunction === 'forkitty') {
				sendMessageToCatChat(chatId, messageText, mainMenu, bot, userState, msg)
			} else if (userState[chatId].currentFunction === 'support') {
				sendMessageToSupportChat(
					chatId,
					messageText,
					mainMenu,
					bot,
					userState,
					msg,
					kotId,
					kittyId,
					userName
				)
			}

			return
		}

		switchFunctionsBot(
			bot,
			msg,
			chatId,
			mainMenu,
			userState,
			cancelKey,
			messageText,
			functionsMenu,
			baseOnKnowledgeMenu,
			resetUserState
		)
		module.exports = { chatId }
	})

	scheduleCompliments(bot)

	module.exports = { bot }
}

initializeBot()

module.exports = { switchFunctionsBot }
