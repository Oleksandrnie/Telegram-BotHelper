// const { logAction } = require("../logs");
const { botFunctionsFAQ } = require('./whatCanTheBotDo')
const { getFilesList } = require('./getFilesList')
const path = require('path')
const fs = require('fs')
const { kotId, kittyId } = require('../../token')
const { logAction } = require('../generateLogs')

function switchFunctionsBot(
	bot,
	msg,
	chatId,
	mainMenu,
	userState,
	cancelKey,
	messageText,
	functionsMenu,
	baseOnKnowledgeMenu,
	resetUserState
) {
	switch (messageText) {
		case '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π':
			bot.sendMessage(chatId, '‚ú®–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª‚ú®', baseOnKnowledgeMenu)
			logAction(msg.from, '–û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π')
			resetUserState(chatId)
			break

		case '–ê—Ä–∫–∞–Ω—ã':
			if (chatId !== kotId && chatId !== kittyId) {
				bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚õîÔ∏èü§∑‚Äç‚ôÄÔ∏è')
			} else {
				userState[chatId].currentSection = 'arcany'
				const arcanyFilesList = getFilesList(
					path.join(__dirname, '..', '..', 'db_arcans_channels', 'arcany')
				)
				const arcanyFilesButtons = arcanyFilesList.map(file => [
					path.basename(file),
				])
				bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:', {
					reply_markup: {
						keyboard: arcanyFilesButtons.concat([['–û–π, –ø–µ—Ä–µ–¥—É–º–∞–ª–∞üíÖüèº']]),
						resize_keyboard: true,
					},
				})
			}

			break

		case '–ö–∞–Ω–∞–ª—ã':
			if (chatId !== kotId && chatId !== kittyId) {
				bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚õîÔ∏èü§∑‚Äç‚ôÄÔ∏è')
			} else {
				userState[chatId].currentSection = 'channels'
				const channelsFilesList = getFilesList(
					path.join(__dirname, '..', '..', 'db_arcans_channels', 'channels')
				)
				const channelsFilesButtons = channelsFilesList.map(file => [
					path.basename(file),
				])
				bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:', {
					reply_markup: {
						keyboard: channelsFilesButtons.concat([['–û–π, –ø–µ—Ä–µ–¥—É–º–∞–ª–∞üíÖüèº']]),
						resize_keyboard: true,
					},
				})
			}
			break

		case '–†–µ–¥–∞–∫—Ü–∏—è':
			bot.sendMessage(chatId, '‚ú®–í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ‚ú®', functionsMenu)
			logAction(msg.from, '–í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ "–†–µ–¥–∞–∫—Ü–∏—è"')
			resetUserState(chatId)
			break

		case '–¢–µ–∫—Å—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä':
			bot.sendMessage(
				chatId,
				'–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –º–∞–ª–µ–Ω—å–∫–∏–πüëáüèº',
				cancelKey
			)
			userState[chatId].awaitingText = true
			userState[chatId].currentFunction = 'lowerCase'
			logAction(msg.from, '–í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä')
			break

		case '–î–ª—è –∏–Ω—Å—Ç—ã':
			bot.sendMessage(chatId, '–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –∏–Ω—Å—Ç—ã üëáüèº', cancelKey)
			userState[chatId].awaitingText = true
			userState[chatId].currentFunction = 'instagramText'
			logAction(msg.from, '–í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–Ω—Å—Ç—ã')
			break

		case '–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç ?':
		case '/help':
			let helpMessage = 'ü§ñ <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?</b>\n\n'
			Object.keys(botFunctionsFAQ).forEach(key => {
				if (Array.isArray(botFunctionsFAQ[key])) {
					helpMessage += `\n<b>–†–∞–∑–¥–µ–ª - ${key}</b>\n`
					botFunctionsFAQ[key].forEach(item => {
						helpMessage += `${item['–¢–µ–∫—Å—Ç']}\n`
					})
				} else {
					helpMessage += `<b>${key}</b>: ${botFunctionsFAQ[key]}\n`
				}
			})
			bot.sendMessage(chatId, helpMessage, { parse_mode: 'HTML' })
			logAction(msg.from, '–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏')
			resetUserState(chatId)
			break

		case '–ß–∞—Ç —Å –∫–∏—Å–æ–π‚ù§Ô∏è‚Äçüî•':
		case '/forkitty':
			bot.sendMessage(
				chatId,
				'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç –∫–æ—Ç–∏–∫–æ–≤ üëáüèº',
				cancelKey
			)
			userState[chatId].awaitingText = true
			userState[chatId].currentFunction = 'forkitty'
			logAction(msg.from, '–ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤')
			break

		case '/support':
			bot.sendMessage(
				chatId,
				'–°–∫–∞–∂–∏—Ç–µ –æ–± —ç—Ç–æ–º –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –∑–∞–±–æ—Ç—ã üëáüèº',
				cancelKey
			)
			userState[chatId].awaitingText = true
			userState[chatId].currentFunction = 'support'
			logAction(msg.from, '–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
			break

		case '–û–π, –ø–µ—Ä–µ–¥—É–º–∞–ª–∞üíÖüèº':
			resetUserState(chatId)
			bot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚õîÔ∏è', mainMenu)
			logAction(msg.from, '–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')
			break

		default:
			const currentSection = userState[chatId].currentSection
			if (currentSection) {
				const filePath = path.join(
					__dirname,
					'..',
					'..',
					'db_arcans_channels',
					currentSection,
					messageText
				)
				if (fs.existsSync(filePath)) {
					bot.sendDocument(chatId, filePath, {
						caption: `–§–∞–π–ª ${messageText}`,
					})
				} else {
					bot.sendMessage(chatId, '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.')
				}
			}
			break
	}
}

module.exports = { switchFunctionsBot }
